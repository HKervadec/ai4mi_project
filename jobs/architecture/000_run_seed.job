#!/bin/bash
#SBATCH --partition=gpu_a100
#SBATCH --gpus=1
#SBATCH --job-name=TestEval_seed
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=9
#SBATCH --time=02:00:00
#SBATCH --output=outfiles/test_full_%A.out
#SBATCH --hint=nomultithread

set -Eeuo pipefail
trap 'echo "[ERR] Line $LINENO failed. Exiting." >&2' ERR

# ------------------------------
# Config (overridable via --export)
# ------------------------------
PROJECT_DIR="${PROJECT_DIR:-$HOME/ai4mi_project}"
MODE="${MODE:-train}"                 # "prep" or "train"
SEED="${SEED:-42}"
EPOCHS="${EPOCHS:-25}"
RUN_NAME="${RUN_NAME:-baseline_test}"
RESULTS_DIR="${RESULTS_DIR:-train_results}"

echo "[INFO] Job mode: $MODE | Seed: $SEED | Epochs: $EPOCHS"
echo "[INFO] Project dir: $PROJECT_DIR"

# ------------------------------
# Environment
# ------------------------------
module purge
module load 2023
module load Anaconda3/2023.07-2
module load CUDA/12.4.0

cd "$PROJECT_DIR" || exit 1
source ai4mi/bin/activate

# Load .env (expects WANDB_ENTITY, WANDB_PROJECT)
if [[ -f .env ]]; then
  set -a
  # shellcheck disable=SC1091
  source .env
  set +a
  echo "[INFO] Loaded .env file"
else
  echo "[WARN] No .env file found, continuing without WANDB config"
fi

# ------------------------------
# One-time data preprocessing
# ------------------------------
prepare_data() {
  if [[ ! -d data/SEGTHOR_CLEAN ]]; then
    echo "[INFO] Preparing SEGTHOR_CLEAN (first-time setup)…"
    make data/SEGTHOR_CLEAN CFLAGS=-O -n  # dry-run preview

    rm -rf data/segthor_fixed_tmp data/segthor_fixed
    python -O sabotage.py \
      --mode inv \
      --source_dir data/segthor_train \
      --dest_dir data/segthor_fixed_tmp \
      -K 2 \
      --regex_gt "GT.nii.gz" \
      -p 4
    mv data/segthor_fixed_tmp data/segthor_fixed

    rm -rf data/SEGTHOR_CLEAN_tmp data/SEGTHOR_CLEAN
    python -O slice_segthor.py \
      --source_dir data/segthor_fixed \
      --dest_dir data/SEGTHOR_CLEAN_tmp \
      --shape 256 256 \
      --retain 10 \
      -p -1
    mv data/SEGTHOR_CLEAN_tmp data/SEGTHOR_CLEAN
  else
    echo "[INFO] Skipping preprocessing (data/SEGTHOR_CLEAN exists)."
  fi
}

# ------------------------------
# One-time GT stitching for eval
# ------------------------------
stitch_reference_gt() {
  mkdir -p val/gt
  if [[ ! -d val/gt || -z "$(ls -A val/gt 2>/dev/null)" ]]; then
    echo "[INFO] Stitching ground-truth volumes → val/gt"
    python stitch_new.py \
      --data_folder data/SEGTHOR_CLEAN/val/gt \
      --dest_folder val/gt \
      --num_classes 5 \
      --grp_regex "(Patient_\\d\\d)_\\d\\d\\d\\d" \
      --source_scan_pattern "data/segthor_fixed/train/{id_}/GT.nii.gz"
  else
    echo "[INFO] Skipping GT stitching (val/gt already populated)."
  fi
}

# ------------------------------
# Training + Eval for one seed
# ------------------------------
run_train_eval_for_seed() {
  local seed="$1"
  local dest="${RESULTS_DIR}/${RUN_NAME}_${seed}"
  local plot_pdf="${dest}/plots.pdf"
  local pred_dir="${dest}/val/pred"

  echo "[INFO] === Seed ${seed} ==="
  echo "[INFO] EXTRA_PARAMS seen by job: ${EXTRA_PARAMS:-<empty>}"


  # Training
  python -O main.py \
    --dataset SEGTHOR_CLEAN \
    --mode full \
    --epoch "$EPOCHS" \
    --dest "$dest" \
    --gpu \
    --wandb_entity "${WANDB_ENTITY:-}" \
    --wandb_project "${WANDB_PROJECT:-}" \
    --seed "$seed" \
    --wandb_name "${RUN_NAME}_${seed}" \
    --save_best_only \
    ${EXTRA_PARAMS:-}

  # Plotting
  python combined_plot.py \
    --results_dir "$dest" \
    --output "$plot_pdf"

  # Stitch predictions (best epoch val slices → 3D vols)
  python stitch_new.py \
    --data_folder "$dest/best_epoch/val" \
    --dest_folder "$pred_dir" \
    --num_classes 5 \
    --grp_regex "(Patient_\\d\\d)_\\d\\d\\d\\d" \
    --source_scan_pattern "data/segthor_fixed/train/{id_}/GT.nii.gz"

  # Evaluation (3D Dice + HD95 etc.) vs stitched GT
  python distorch/compute_metrics.py \
    --ref_folder val/gt \
    --pred_folder "$pred_dir" \
    --ref_extension .nii.gz \
    --pred_extension .nii.gz \
    --num_classes 5 \
    --metrics 3d_dice 3d_hd95 3d_jaccard 3d_assd \
    --save_folder "${dest}/metrics"
    
  # Log metrics to wandb (using the same run ID from training)
  if [[ -f "${dest}/wandb_run_id.txt" ]]; then
    echo "[INFO] Logging 3D metrics to wandb..."
    python log_metrics_to_wandb.py --results_dir "${dest}" --epoch "$EPOCHS"
  else
    echo "[WARN] No wandb run ID found. Skipping wandb metric logging."
  fi

  echo "[INFO] Seed ${seed} done. Results: $dest | Plots: $plot_pdf | Metrics: $dest/metrics"
}

# ------------------------------
# Orchestration
# ------------------------------
case "$MODE" in
  prep)
    prepare_data
    stitch_reference_gt
    echo "[INFO] Prep job complete."
    ;;
  train)
    # Defensive: ensure data & ref GT exist even if no prep job was used
    prepare_data
    stitch_reference_gt
    run_train_eval_for_seed "$SEED"
    ;;
  *)
    echo "[ERR] Unknown MODE: $MODE" >&2
    exit 2
    ;;
esac

echo "[INFO] Job finished."
